<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bathysphere.org</title><link>https://www.bathysphere.org/</link><description>Recent content on Bathysphere.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bathysphere.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Embrace Limitations</title><link>https://www.bathysphere.org/p/embrace-limitations/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/embrace-limitations/</guid><description>&lt;img src="https://www.bathysphere.org/p/embrace-limitations/image.png" alt="Featured image of post Embrace Limitations" />&lt;h1 id="limited-systems-can-be-cheaper-and-better">Limited systems can be cheaper and better
&lt;/h1>&lt;p>Writing a robust, general-purpose system is often quite expensive. For example, the memory allocator behind &lt;code>malloc()&lt;/code> and &lt;code>new&lt;/code> is the result of years of work and fine-tuning. It has to handle every weird allocation pattern, be completely thread-safe on 64-core processors, minimize memory fragmentation and overhead, etc. If the memory allocator is inadequate for some reason and you feel the urge to write your own replacement, a starting assumption is that it will take you about as long as the original took - maybe quicker if you are very smart, longer if you are unfamiliar with the problem space. In many cases that&amp;rsquo;s impractical.&lt;/p>
&lt;p>However if you introduce the right limitation it can massively reduce the effort required. &lt;code>malloc&lt;/code> is partly complicated because the caller can allocate and deallocate any sized chunk of memory in any order, from any thread. An arena allocator has a different interface: the caller first creates an &lt;code>arena&lt;/code>, then allocates many small chunks of memory inside that arena, then deletes the arena when complete, invalidating and freeing all the small chunks at once. This works well if you need to allocate a number of temporary structures to process a request, then can dispose them all at the end. Usually the implementation is a big chunk of memory and a &lt;code>next&lt;/code> pointer. To allocate memory, just return the current value of &lt;code>next&lt;/code> and increment it by the number of bytes requested. The implementation can be a few hundred lines, and allocation will be very fast.&lt;/p>
&lt;p>Why is this cheaper to implement? Because we&amp;rsquo;ve embraced a limitation and produced a less general interface. The limitation here is on &lt;code>free()&lt;/code> - the caller can&amp;rsquo;t free individual memory chunks. That doesn&amp;rsquo;t seem like a huge difference, but it simplifies things a lot.&lt;/p>
&lt;h1 id="buy-general-purpose-build-special-purpose">Buy general-purpose, build special-purpose
&lt;/h1>&lt;p>It rarely makes sense to write your own very general-purpose subsystem (like custom programming language, database engine, memory allocator) if your main goal is to build an application - you likely can&amp;rsquo;t afford to do a good job of it.&lt;/p>
&lt;p>But &lt;em>if&lt;/em> the off-the-shelf components are not suitable, it may make sense to solve a &lt;em>specialized&lt;/em> subset of the problem: not a programming language but a tiny DSL; not a general-purpose allocator but an arena allocator. You can take advantage of the limitations you have embraced to simplify the implementation by orders of magnitude.&lt;/p>
&lt;h1 id="dont-evolve-your-special-purpose-system-to-make-it-more-general">Don&amp;rsquo;t evolve your special-purpose system to make it more general
&lt;/h1>&lt;p>So you successfully implemented your special-purpose DSL for mangling your custom data. Maybe it&amp;rsquo;s super fast and reliable because it has no looping constructs or branches so execution time is bounded. Everyone loves it. But then someone comes along and says &amp;ldquo;but you know, it would be really nice if we could do a loop here&amp;hellip;&amp;rdquo;. If you go ahead and kludge in a wonky looping construct, this is a classic blunder, like going up against a Sicilian when death is on the line. Now your system has lost its defining limitation, it is competing against general-purpose languages, and on those metrics it probably sucks - limited adoption, no debugger, no standard library, no ecosystem, and so on.&lt;/p>
&lt;p>This blunder is so classic it has its own &lt;a class="link" href="https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule" target="_blank" rel="noopener"
>Wikipedia article&lt;/a>. Don&amp;rsquo;t fall for it! Either stick with your limited system and embrace the limitations, or if the problem really is more general, you have to suck it up and adopt the &amp;lsquo;real&amp;rsquo; system.&lt;/p></description></item><item><title>Unofficial Safety-Critical Software</title><link>https://www.bathysphere.org/p/unofficial-safety/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/unofficial-safety/</guid><description>&lt;img src="https://www.bathysphere.org/p/unofficial-safety/safety.jpg" alt="Featured image of post Unofficial Safety-Critical Software" />&lt;p>Some computer systems are obviously safety-critical. If you are working on flight-control software for Boeing or Airbus, everyone involved is aware that mistakes in this program could cause loss of life. So software like this is written very, very carefully - extremely detailed specifications, often proofs of correctness using a theorem prover, exhaustive testing, and so on.&lt;/p>
&lt;p>But there are also cases where general-purpose software can wind up in a situation where bugs could cause dangerous consequences. I&amp;rsquo;m using &amp;ldquo;unofficial safety-critical software&amp;rdquo; quite loosely to refer to refer to this.&lt;/p>
&lt;p>For example, a web search turns up many resources like &lt;a class="link" href="https://www.snprs.scot.nhs.uk/?page_id=635" target="_blank" rel="noopener"
>https://www.snprs.scot.nhs.uk/?page_id=635&lt;/a>, which contains an Excel spreadsheet for calculating drug dosages, including for dangerous medications like fentanyl. If there are errors either in the Excel application itself, or in the spreadsheet, it doesn&amp;rsquo;t seem like a stretch to say that could kill a child. It&amp;rsquo;s not surprising that the web page says &lt;strong>&amp;ldquo;Disclaimer: this drug calculator is intended as an aid to management and must AT ALL TIMES be used in conjunction with local drug preparation, checking and administration policies&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://www.bathysphere.org/p/unofficial-safety/dosage.png"
width="1423"
height="1136"
srcset="https://www.bathysphere.org/p/unofficial-safety/dosage_hu_ece146b3427a9959.png 480w, https://www.bathysphere.org/p/unofficial-safety/dosage_hu_8fe9364a116f447a.png 1024w"
loading="lazy"
alt="A screenshot of a spreadsheet for calculating drug dosages"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/p>
&lt;p>I don&amp;rsquo;t mean by this to call out either the people who made this calculator, or Microsoft, as having done something wrong. I don&amp;rsquo;t have any firm conclusions at all, but likely this is a lot safer than calculating things by hand.&lt;/p>
&lt;p>But it raises some interesting questions.&lt;/p>
&lt;ul>
&lt;li>Is Excel &amp;ldquo;unofficial safety-critical software&amp;rdquo;? Is the spreadsheet itself USCC?&lt;/li>
&lt;li>How about any sufficiently-powerful program, like a programming language or MATLAB, which could be used for life-or-death calculations?&lt;/li>
&lt;li>If calculating dosages in a spreadsheet is too dangerous, what would we recommend instead?&lt;/li>
&lt;li>How do we distribute responsibility for correctness between Excel, the spreadsheet author, and the physician using the spreadsheet? Excel&amp;rsquo;s EULA and the web page disclaimer push the responsibility entirely to the end user. Is that reasonable?&lt;/li>
&lt;li>Is the software I work on unofficially safety-critical? Should that change my approach?&lt;/li>
&lt;/ul></description></item><item><title>Deferred Maintenance is a better metaphor than Technical Debt</title><link>https://www.bathysphere.org/p/deferred-maintenance/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/deferred-maintenance/</guid><description>&lt;img src="https://www.bathysphere.org/p/deferred-maintenance/image.png" alt="Featured image of post Deferred Maintenance is a better metaphor than Technical Debt" />&lt;p>There&amp;rsquo;s a lot of discussion about Technical Debt in Software Engineering. I believe the term originated &lt;a class="link" href="http://wiki.c2.com/?TechnicalDebt" target="_blank" rel="noopener"
>on the C2 wiki&lt;/a>. It&amp;rsquo;s often used to explain to non-software-engineers why it&amp;rsquo;s important to invest in code quality.&lt;/p>
&lt;p>I&amp;rsquo;m far from the first person to think that the term Technical Debt is potentially misleading. Rob Jeffries has a discussion &lt;a class="link" href="https://ronjeffries.com/articles/015-11/tech-debt/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>To oversimplify, debt involves interest payments. These compound over time, occur at predictable intervals, can be paid off, and cost a fairly predictable amount of money. None of these are true when you decide to take shortcuts in software: the passage of time has no direct compounding effect, and you don&amp;rsquo;t know when the bill will come due or how expensive it will be.&lt;/p>
&lt;p>This mismatch between the term and the implications can be a problem if it conveys the wrong impression to our non-software colleague.&lt;/p>
&lt;p>I like the term &lt;em>deferred maintenance&lt;/em> better. This is also an inexact metaphor but I think it&amp;rsquo;s closer. Anyone who has owned a car understands that it needs maintenance. If you don&amp;rsquo;t change the oil at regular intervals, the car will gradually run more slowly and roughly. Eventually, at an upredictable time, the engine will seize up and you&amp;rsquo;ll be faced with a large and unpredictable bill to replace the entire thing. If you don&amp;rsquo;t service the brakes, the results can be significantly worse. Consider a 747 instead of a Corolla if you really want to emphasize the importance of maintenance.&lt;/p>
&lt;p>You can extend this notion to help justify the idea of scheduling time explicitly for maintenance activity, like a monthly or quarterly &amp;rsquo;tune-up'.&lt;/p>
&lt;p>Bottom line: if you have a large piece of software which is not maintained, you own a very complicated machine which is not performing as well as it could, and might break down at any point.&lt;/p></description></item><item><title>Financial Perpetual Motion</title><link>https://www.bathysphere.org/p/financial-perpetual-motion/</link><pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/financial-perpetual-motion/</guid><description>&lt;img src="https://www.bathysphere.org/p/financial-perpetual-motion/image.png" alt="Featured image of post Financial Perpetual Motion" />&lt;h1 id="financial-perpetual-motion">Financial Perpetual Motion
&lt;/h1>&lt;p>Every so often, someone claims to have created a &lt;a class="link" href="https://newspunch.com/incredible-scientist-makes-free-energy-perpetual-motion-generator/" target="_blank" rel="noopener"
>perpetual motion machine&lt;/a>, or a source of free energy - some kind of contraption which does work without any external power source. Anyone with a physics background knows that this is impossible due to the laws of thermodynamics, but these claims still find a small credulous audience. Normally the device is accompanied by lots of handwaving to obscure the fact that it can&amp;rsquo;t possibly work.&lt;/p>
&lt;p>I&amp;rsquo;ve recently noticed a number of crypto projects which are IMHO &amp;lsquo;Financial Perpetual Motion Machines&amp;rsquo;. They claim to produce free money, without any form of actual revenue. Perhaps because the laws of finance are not quite as clear-cut or widely understood as thermodynamics, these projects have gained more attention from speculators than they deserve.&lt;/p>
&lt;p>This is my attempt to explain &lt;em>why&lt;/em> these projects are Financial Perpetual Motion Machines (FPMMs), using &lt;a class="link" href="https://titano.finance/" target="_blank" rel="noopener"
>Titano&lt;/a> as an example. There are many others like &lt;a class="link" href="https://www.coingecko.com/en/coins/wonderland" target="_blank" rel="noopener"
>Wonderland&lt;/a> or &lt;a class="link" href="https://safuu.com/" target="_blank" rel="noopener"
>Safuu&lt;/a> (which offers 383,000% interest!).&lt;/p>
&lt;h2 id="what-is-titano">What is Titano?
&lt;/h2>&lt;p>Titano says it is &amp;ldquo;The Best Auto-Staking &amp;amp; Auto-Compounding Protocol in Crypto&amp;rdquo;, and advertises an eye-catching &amp;ldquo;102,483% APY&amp;rdquo;. You buy some Titano tokens, and like a bank they pay you interest - you get more tokens each day (in fact, every 30 minutes) that you continue to hold them. Unlike a bank, you get 100,000% interest, instead of about 1% for a savings account. This is so much interest that if you start with $1,000 of Titano and hold it for one year, you wind up with over $1,000,000. 😲 This sounds pretty good! Unfortunately, it is too good to be true, as we will see.&lt;/p>
&lt;h2 id="compound-interest">Compound interest
&lt;/h2>&lt;p>Our first red flag is just to do the math for a few years. Let&amp;rsquo;s imagine you buy 1000 tokens and hold.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Year&lt;/th>
&lt;th>Tokens&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>1,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1,024,830&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1,050,276,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1,076,354,895,000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In other words, you can be a token trillionaire in 3 short years! Does that sound plausible?&lt;/p>
&lt;h2 id="loans-and-interest">Loans and interest
&lt;/h2>&lt;p>More generally, say you have a great idea for a business, but no money right now. You can borrow money, and then when your great idea makes a profit, pay it back. This is the foundation of capitalism. However the person who lends you the money is taking a risk - maybe your idea isn&amp;rsquo;t so hot after all - so they want interest. You have to pay back more than you borrowed. Lots of factors affect the interest rate, but risk is probably the biggest. This is why, unfairly enough, if you have a high credit rating and can pay back your credit card easily you get a lower rate than someone with a bad credit rating. If you have really bad credit you might only be able to get a predatory payday loan, which can have interest rates as high as 400% to 700% APR.&lt;/p>
&lt;p>Let&amp;rsquo;s apply this to Titano. If we regard Titano as a business venture, by purchasing tokens you are making them a loan, and they are paying you interest on it. Surprisingly they are willing to pay interest &lt;em>over 100 times higher than a payday loan&lt;/em>. This is our second red flag. Why would a borrower pay interest higher than they need to? I assume you would shop around for the best rate before taking out a mortgage. Are Titano offering this rate out of the kindness of their hearts, or because lending money to pseudonymous cryptobros without any kind of security is extremely risky?&lt;/p>
&lt;h2 id="revenue">Revenue
&lt;/h2>&lt;p>Assuming you are an honest business, your business plan must factor in making enough money to pay back the loans, including interest. If you have to pay 100% interest, any venture which makes less than 100% return over the same period is going to be a loss for you. Applying this to Titano, how do they make money?&lt;/p>
&lt;p>&lt;strong>The only current source of revenue is a cut whenever someone buys or sells Titano.&lt;/strong> This is red flag #3, and to my mind the real reason to regard this as financial perpetual motion. A real venture needs to make money: for example, by lending money to others, like a bank does, or by making cars and selling them. Titano only makes money as a side-effect of people speculating on Titano. There is a &lt;a class="link" href="https://docs.titano.finance/roadmap" target="_blank" rel="noopener"
>road map&lt;/a> but it doesn&amp;rsquo;t look like a business plan which actually makes any money, let alone 100,000% ROI. It&amp;rsquo;s worth recalling that no business in human history has produced that kind of return.&lt;/p>
&lt;h2 id="exchange-rates-and-inflation">Exchange rates and inflation
&lt;/h2>&lt;p>In the above discussion I assume that 1 Titano token has a constant price measured in &amp;lsquo;real terms&amp;rsquo;. (Feel free to quibble about how real the USD or the Euro are, if you like). This isn&amp;rsquo;t true, of course. You can regard Titano as a foreign currency with a floating exchange rate vs USD.&lt;/p>
&lt;p>There is a way for Titano to pay 100,000% interest &lt;em>denominated in Titano&lt;/em> without a corresponding 100,000% increase in the value of the underlying venture: inflation. This is the approach taken by economic powerhouses such as &lt;a class="link" href="https://en.wikipedia.org/wiki/Hyperinflation_in_Zimbabwe" target="_blank" rel="noopener"
>Zimbabwe&lt;/a> and &lt;a class="link" href="https://en.wikipedia.org/wiki/Hyperinflation_in_the_Weimar_Republic" target="_blank" rel="noopener"
>Weimar-era Germany&lt;/a>. If the supply of Titano increases 1000x but the value of Titano the project remains static, you could expect the value of each token to drop by 1000x.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>To assess the plausibility of a perpetual motion machine, it&amp;rsquo;s easiest to go back to first principles: &lt;em>where does the energy come from?&lt;/em> If there&amp;rsquo;s no clear explanation, it&amp;rsquo;s baloney.&lt;/p>
&lt;p>To decide whether a financial &amp;lsquo;innovation&amp;rsquo; like Titano is a legitimate venture or a FPMM, it&amp;rsquo;s easiest to go back to first principles: &lt;em>where does the money come from?&lt;/em> If there&amp;rsquo;s no clear explanation, this quickly makes it apparent there is nothing there. You can ignore all the waffle about treasuries, burns and risk-free value.&lt;/p>
&lt;h2 id="epilog">Epilog
&lt;/h2>&lt;p>Unspurprisingly, Titano shut down less than a year after this was written.&lt;/p></description></item><item><title>Archives</title><link>https://www.bathysphere.org/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/archives/</guid><description/></item><item><title>DAOn't believe the hype</title><link>https://www.bathysphere.org/p/dao-hype/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/dao-hype/</guid><description>&lt;img src="https://www.bathysphere.org/p/dao-hype/image.png" alt="Featured image of post DAOn't believe the hype" />&lt;p>Disclaimer: I&amp;rsquo;m not an expert on the crypto space, just a curious amateur. It&amp;rsquo;s quite possible I have misunderstood something important below. Do let me know of any corrections via the comment section!&lt;/p>
&lt;p>If you read the &lt;a class="link" href="https://ethereum.org/en/dao/" target="_blank" rel="noopener"
>Ethereum website on DAO&amp;rsquo;s&lt;/a>, you&amp;rsquo;ll see this:&lt;/p>
&lt;blockquote>
&lt;p>DAOs are an effective and safe way to work with like-minded folks around the globe.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Think of them like an internet-native business that&amp;rsquo;s collectively owned and managed by its members. They have built-in treasuries that no one has the authority to access without the approval of the group. Decisions are governed by proposals and voting to ensure everyone in the organization has a voice.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>There&amp;rsquo;s no CEO who can authorize spending based on their own whims and no chance of a dodgy CFO manipulating the books. Everything is out in the open and the rules around spending are baked into the DAO via its code.&lt;/p>&lt;/blockquote>
&lt;p>This is &lt;em>not really true&lt;/em> for most DAOs. I&amp;rsquo;ll explain.&lt;/p>
&lt;p>I will use &amp;lsquo;The Spice DAO&amp;rsquo; (aka Dune DAO) as an example, since that&amp;rsquo;s been &lt;a class="link" href="https://www.buzzfeednews.com/article/amansethi/spicedao-dunedao-soby" target="_blank" rel="noopener"
>in the news&lt;/a> lately. This DAO was originally set up with the stated goal of purchasing a copy of the &amp;lsquo;pitch book&amp;rsquo; Alejandro Jodorowsky put together while trying to persuade Hollywood studios to fund a movie he wanted to make based on Frank Herbert&amp;rsquo;s novel Dune. They succeeded in raising a substantial amount of money - approximately $12M dollars. They were then able to purchase the book at auction, but then had to work out what to do with the rest of the money. I think the fight that ensued over the proper fate of the funds encapsulates a lot of the issues around DAO governance.&lt;/p>
&lt;h1 id="the-contract">The contract
&lt;/h1>&lt;p>It &lt;em>is&lt;/em> true that there&amp;rsquo;s no official CEO or CFO for a DAO. But that doesn&amp;rsquo;t mean there isn&amp;rsquo;t an inner circle of people who hold the true power. In a DAO, these are the people who know the private keys to the DAO&amp;rsquo;s wallet. For the Dune DAO these are&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Spice DAO&amp;#39;s funds will be held in a 3/5 Gnosis Multi-sig of the following team:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Yojimbo_King (Remilia Collective)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Sobylife (Ex Populus)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@CharlieFang77 (Remilia Collective)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@DeezeFi (Fractional Art)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@DrydenwtBrown (Praxis Society)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://dune.foundation/" target="_blank" rel="noopener"
>source&lt;/a>&lt;/p>
&lt;p>This means that the DAO can only transfer funds if 3 out of 5 of these people agree to do so by signing the transaction. (Incidentally, it would be entirely possible to create a DAO where all of the signing keys are held by the same real-world individual via multiple separate wallets, thus giving the illusion of a &amp;lsquo;board&amp;rsquo; where none exists. I&amp;rsquo;m not alleging that is the case for the Spice DAO, just that in general it is possible to do so, and quite hard for someone else to detect.)&lt;/p>
&lt;p>What limitations are there on what the signers can do, as long as 3 of them agree to do it? Can they spend all the money on fine wines and yachts? Well, they can do whatever the smart contract allows them to. Ethereum allows &amp;lsquo;smart contracts&amp;rsquo; - snippets of code which enforce rules, mostly about how cryptographic transactions occur. So you might hope from the Ethereum website&amp;rsquo;s description that &amp;ldquo;There&amp;rsquo;s no CEO who can authorize spending on their own whims&amp;rdquo; is enforced by a smart contract.&lt;/p>
&lt;p>For Spice DAO, and I believe the vast majority of DAOs, this is not the case. The &amp;lsquo;smart contract&amp;rsquo; can be found &lt;a class="link" href="https://etherscan.io/address/0x9b6db7597a74602a5a806e33408e7e2dafa58193#code" target="_blank" rel="noopener"
>here&lt;/a>. It&amp;rsquo;s rather difficult to audit because there&amp;rsquo;s no verified source code for this contract, just a bunch of Ethereum bytecode. If it&amp;rsquo;s not obvious to you what a page of hex digits starting with &amp;lsquo;0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a61&amp;hellip;&amp;rsquo; means, you&amp;rsquo;re not alone. Fortunately the Etherscan.io website comes with a decompiler which can convert it to &lt;a class="link" href="https://etherscan.io/bytecode-decompiler?a=0x9b6db7597a74602a5a806e33408e7e2dafa58193" target="_blank" rel="noopener"
>something semi-readable&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;m not an expert in deciphering these contracts (and I definitely wouldn&amp;rsquo;t be able to spot a well-disguised malicious contract), but as far as I can see it&amp;rsquo;s just a wallet. In particular there&amp;rsquo;s no encoded limitations on what the wallet holders can do (such as limits on transaction size or counterparties). So my claim is that in practice, &amp;lsquo;3 out of 5 wallet holders &lt;em>can&lt;/em> authorize spending based on their own whims&amp;rsquo;.&lt;/p>
&lt;p>&amp;ldquo;But wait!&amp;rdquo; I hear you say. What about governance tokens? Don&amp;rsquo;t those control the DAO?&lt;/p>
&lt;p>Glad you asked.&lt;/p>
&lt;h1 id="governance-tokens-and-proposals">Governance Tokens and Proposals
&lt;/h1>&lt;p>When you fund a DAO, you are typically given tokens in return - in the case of the Spice DAO, these are called $SPICE. These can be bought and sold, and each such token gives you one vote on any governance proposal. If a majority of tokens vote in favor of the proposal, it is passed. The Spice DAO page says &amp;ldquo;Proposals will be executed on-chain by the multisig.&amp;rdquo; which sounds important. Power to the people!&lt;/p>
&lt;p>Well, sort of.&lt;/p>
&lt;p>The Spice DAO has had one governance proposal so far, the text of which can be seen here: &lt;a class="link" href="https://snapshot.org/#/dunedao.eth/proposal/0x2038fc240d0e85c496cc692d0001fb159d6f613b546392aa96e49a3b752ced0d" target="_blank" rel="noopener"
>https://snapshot.org/#/dunedao.eth/proposal/0x2038fc240d0e85c496cc692d0001fb159d6f613b546392aa96e49a3b752ced0d&lt;/a> . This was held &lt;em>after&lt;/em> the initial auction. It&amp;rsquo;s interesting to me that during the most important times in the DAO&amp;rsquo;s existence - the initial fundraising and the purchase of the book - there was actually no formal governance of the DAO beyond the mission statement on the fundraising page. In fact, the book was actually purchased by @sobylife using his own money, and the DAO reimbursed him.&lt;/p>
&lt;p>The proposal formalizes who can do what, and how much money they can spend, eg.&lt;/p>
&lt;blockquote>
&lt;p>Operations Budget&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>As Treasurer, Charlie will have autonomy in using funds to cover monthly operational expenses such as core team compensation and third-party independent contractor invoices with a monthly discretionary budget of 50,000 USDC:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Core team compensation = Maximum 31,665.60 USDC/month&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Third-party contractors such as IT, social media agency, book shipping and storage and software developers, and unforeseen incidentals = Maximum 18,334.40 USDC/month&lt;/p>&lt;/blockquote>
&lt;p>The governance proposal was passed with little fuss and 95.97% of votes in favor. It was &amp;rsquo;executed on chain&amp;rsquo; by creating a block with a link to an &lt;a class="link" href="https://cloudflare-ipfs.com/ipfs/QmYLXfkgsoPkHJsEZxNV1GfgnSp8u4qrjaocx175yVVzVb" target="_blank" rel="noopener"
>IPFS file&lt;/a> containing the English text of the proposal. But it&amp;rsquo;s important to note a couple of things.&lt;/p>
&lt;ol>
&lt;li>The governance proposal is just English, not code. It has no technical effect on the smart contract or what the DAO signature holders can actually do.&lt;/li>
&lt;li>It&amp;rsquo;s a little unclear whether it constitutes a legally binding contract either. I Am Not A Lawyer, but I don&amp;rsquo;t believe it&amp;rsquo;s well-settled law whether a DAO token owner can sue anyone for not abiding by the terms in the governance proposal.&lt;/li>
&lt;/ol>
&lt;p>So these governance proposals are purely advisory, and they&amp;rsquo;re almost certainly toothless if the signature holders don&amp;rsquo;t want to play ball. Also also:&lt;/p>
&lt;ul>
&lt;li>Who gets to decide if a governance proposal even comes up for a vote? Why the signature holders of course. If you have a proposal they don&amp;rsquo;t like, nobody will ever get to vote on it.&lt;/li>
&lt;li>In this case, over 50% of the votes were cast by a single individual. I suspect whales will determine the outcome of any proposal vote in practice.&lt;/li>
&lt;/ul>
&lt;h1 id="conclusions">Conclusions
&lt;/h1>&lt;p>Many DAOs are neither decentralized (power belongs to the signers and somewhat to major token holders), autonomous (most smart contracts are anything but) nor particularly organized. They are essentially wallets with a handful of signers and a manifesto. You might want to bear this in mind when choosing whether to invest. There are definitely some projects which are trying more complex approaches (see &lt;a class="link" href="https://medium.com/compound-finance/building-a-governance-interface-474fc271588c" target="_blank" rel="noopener"
>https://medium.com/compound-finance/building-a-governance-interface-474fc271588c&lt;/a>) but you should not assume that any given DAO uses these.&lt;/p></description></item><item><title>How Azure Cloud Shell stores your files</title><link>https://www.bathysphere.org/p/how-azure-cloud-shell-stores-your-files/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/how-azure-cloud-shell-stores-your-files/</guid><description>&lt;img src="https://www.bathysphere.org/p/how-azure-cloud-shell-stores-your-files/csfiles.png" alt="Featured image of post How Azure Cloud Shell stores your files" />&lt;p>The official information on Cloud Shell&amp;rsquo;s file storage is &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage" target="_blank" rel="noopener"
>here&lt;/a>. It&amp;rsquo;s good stuff, and covers most things you might like to know, take a look! This blog contains a few more behind-the-scenes details for the curious. NB: We might change this in the future, this isn&amp;rsquo;t guaranteed.&lt;/p>
&lt;p>We can see from the docs that all your files are stored in an Azure File Share which belongs to you, and which you select when you first start CLoud Shell. But how do those files map to the directory layout you see in Cloud Shell?&lt;/p>
&lt;p>You can see that there are several mount points set up:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">edwin@Azure:~$ df -H
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">overlay 52G 17G 36G 32% /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 68M &lt;span class="m">0&lt;/span> 68M 0% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 2.1G &lt;span class="m">0&lt;/span> 2.1G 0% /sys/fs/cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/sda1 52G 17G 36G 32% /home
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shm 68M 8.2k 68M 1% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//csxxx.file.core.windows.net/cs-edyoung-microsoft-com-xxx 6.5G 5.4G 1.1G 84% /usr/csuser/clouddrive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 2.1G &lt;span class="m">0&lt;/span> 2.1G 0% /proc/acpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 2.1G &lt;span class="m">0&lt;/span> 2.1G 0% /proc/scsi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 2.1G &lt;span class="m">0&lt;/span> 2.1G 0% /sys/firmware
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/loop0 5.3G 1.3G 3.7G 27% /home/edwin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can ignore the overlay and tmpfs stuff, which is container voodoo.&lt;/p>
&lt;p>The bits that matter:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Inside Cloud Shell, you have a classic Unix filesystem. Under the filesystem root &lt;code>/&lt;/code>, most everything is owned by root, and is not writable by the Cloud Shell user. This includes all the utility programs Cloud Shell ships.
Even if you find some way to elevate privileges and update them, all the changes will be lost the next time you run Cloud Shell, because these are part of the container image, and are recreated every time you reconnect.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There&amp;rsquo;s also your &amp;lsquo;cloud drive&amp;rsquo;, which is your Azure File Share mounted as a CIFS filesystem as &lt;code>/usr/csuser/clouddrive&lt;/code>. In this example, mine is in the file share &lt;code>cs-edyoung-microsoft-com-xxx&lt;/code> in the storage account &lt;code>csxxx.file.core.windows.net&lt;/code> There&amp;rsquo;s a symlink set up so that ~/clouddrive goes to the same location. Through that you can read and write files to the Azure file share.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Your home directory is different. It&amp;rsquo;s under &lt;code>/home/username&lt;/code> (mine is &lt;code>/home/edwin&lt;/code> ) and is writable. You can see that is a mount point for &lt;code>/dev/loop0&lt;/code>, which is a loopback filesystem. A loopback filesystem allows you to create a filesystem &lt;em>inside a file&lt;/em>. Where is that file? Inside your cloud drive fileshare, as a regular file &lt;code>.cloudconsole/acc_username.img&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">edwin@Azure:~$ ls -l ~/clouddrive/.cloudconsole/acc_edwin.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwxrwxrwx &lt;span class="m">1&lt;/span> edwin edwin &lt;span class="m">5368709120&lt;/span> May &lt;span class="m">26&lt;/span> 06:25 /home/edwin/clouddrive/.cloudconsole/acc_edwin.img
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can see this is a 5GB file. Inside that file is an entire filesystem, which contains the files which you have stored in your home directory. &lt;strong>Don&amp;rsquo;t delete or modify that file, or you&amp;rsquo;ll lose whatever you have in your Cloud Shell home directory&lt;/strong>. Generally you should treat this file as opaque, but if you desperately want to you could download the file and mount it as a loopback device on a regular Linux box. If for some reason you &lt;em>want&lt;/em> to delete everything in your home directory, you could delete that file from the file share, and when you restart Cloud Shell we will create a new home directory file for you.&lt;/p>
&lt;h2 id="ephemeral-storage">Ephemeral Storage
&lt;/h2>&lt;p>If you are using Cloud Shell in ephemeral mode, then your home directory is just part of the container image, and everything in it will disappear when your session ends.&lt;/p></description></item><item><title>Azure Cloud Shell, az login, and Managed Identity</title><link>https://www.bathysphere.org/p/cloud-shell-auth/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/p/cloud-shell-auth/</guid><description>&lt;img src="https://www.bathysphere.org/p/cloud-shell-auth/agenda.png" alt="Featured image of post Azure Cloud Shell, az login, and Managed Identity" />&lt;p>When you open Azure Cloud Shell and run &lt;code>Get-AzVM&lt;/code> or &lt;code>az vm list&lt;/code> for the first time, it works right away. But why?&lt;/p>
&lt;p>That may seem like an odd question. Of course it should work right away! But it doesn&amp;rsquo;t work quite the same way when you run PowerShell or Azure CLI locally - you need to run &lt;code>Connect-AzAccount&lt;/code> or &lt;code>az login&lt;/code> first. So what&amp;rsquo;s the difference?&lt;/p>
&lt;p>A surprising amount of things are happening behind the scenes for this to work, and at the time of writing there are some limitations you might hit. This post tries to explain what is going on. If you just want to use Cloud Shell you don&amp;rsquo;t really need to know any of this.&lt;/p>
&lt;h2 id="oauth">OAuth
&lt;/h2>&lt;p>Within Azure, basically everything is authenticated using &lt;strong>OAuth&lt;/strong>. That&amp;rsquo;s a complicated beast I can&amp;rsquo;t explain here in detail. The docs &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-vs-authorization" target="_blank" rel="noopener"
>here&lt;/a> provide a reasonable starting point. For our purposes, the important thing is that you authenticate yourself first to Azure Active Directory when you open the Azure Portal. AAD checks your password/PIN+smart card/whatever and issues a &lt;strong>refresh token&lt;/strong>. This gets stored outside our scope in the browser - Cloud Shell never accesses it directly.&lt;/p>
&lt;p>When you need to access a particular resource, you need an &lt;strong>access token&lt;/strong>. Given the refresh token, you ask AAD &amp;lsquo;hey, I want to access Azure Storage, can I have a token?&amp;rsquo;. AAD then sends you a short-lived token (usually lasting 1 hour) which can then be presented to Azure Storage; storage checks the signature on the token and uses that to check if you are legit.&lt;/p>
&lt;p>But as I mentioned, in Cloud Shell we don&amp;rsquo;t have your refresh token, so how does this work?&lt;/p>
&lt;h2 id="managed-identity">Managed Identity
&lt;/h2>&lt;p>&lt;strong>Managed Identity&lt;/strong> is a cool scheme invented so that code which needs to access a resource doesn&amp;rsquo;t need to store (and worry about the security and rotation of) a password. The Azure fabric manages an identity and is configured so that any code that runs on a particular VM can ask an endpoint &amp;ldquo;Can I have an access token?&amp;rdquo;. I think of this as an ambient credential for the VM - we grant that machine access to resources and allow code running on it to get tokens without any extra hassle.&lt;/p>
&lt;p>This works by having a special endpoint. If you&amp;rsquo;re on an Azure VM with a managed identity, you can run&lt;/p>
&lt;p>&lt;code>curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true&lt;/code>&lt;/p>
&lt;p>and get a token, which is just a JSON blob looking a bit like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;accessToken&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;eyJ0blah...&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;expiresOn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2021-03-19 23:12:01.371124&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;subscription&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;b1071e00-5da5-49c8-b902-14951e12f37a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tenant&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;72f988bf-86f1-41af-91ab-2d7cd011db47&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tokenType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bearer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="managed-identity-in-cloud-shell">Managed Identity in Cloud Shell
&lt;/h2>&lt;p>In Cloud Shell you still want an &amp;lsquo;ambient&amp;rsquo; identity - you don&amp;rsquo;t want to sign on &lt;em>again&lt;/em>. But you don&amp;rsquo;t want a token that identifies you as the machine where Cloud Shell runs, you want one based on your own identity that you signed on to the portal with.&lt;/p>
&lt;p>So we provide an alternative managed identity endpoint.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl &lt;span class="s1">&amp;#39;http://localhost:50342/metadata/identity/oauth2/token?api-version=2018-02-01&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F&amp;#39;&lt;/span> -H Metadata:true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Will give you an access token based on your own identity. Unlike Azure&amp;rsquo;s regular managed identity endpoint, this is implemented as another process running inside your container.
When it gets a request, it actually sends the request back to your browser, which forwards it to the parent Portal frame, which makes a request to AAD, and the resulting token
flows back down the same path.&lt;/p>
&lt;h2 id="tool-considerations">Tool Considerations
&lt;/h2>&lt;p>Client tools deal with this endpoint in different ways.&lt;/p>
&lt;p>Azure PowerShell supports &lt;code>Connect-AzAccount -Identity&lt;/code> which tells it to use managed identity (whether Cloud Shell or regular); AZ CLI has &lt;code>az login --identity&lt;/code> for the same purpose. We run both during the Cloud Shell startup so you don&amp;rsquo;t have to.&lt;/p>
&lt;p>You can also login explicitly, by running &lt;code>az login&lt;/code> or &lt;code>Connect-AzAccount&lt;/code>. That overrides this mechanism and can be used to (for example) use a different identity than the one you logged on to Cloud Shell with.&lt;/p>
&lt;h2 id="limitations-and-issues">Limitations and Issues
&lt;/h2>&lt;p>This works great most of the time, but there are a couple of snags you might run into.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We have an allow-list of resources that we can provide tokens for (a limitation we hope to raise in future). This means that when someone introduces a brand new resource type for a new service, we have to update the list in Cloud Shell too. If you run a command and see something like this: &lt;code>&amp;quot;error&amp;quot;:{&amp;quot;code&amp;quot;:&amp;quot;AudienceNotSupported&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;Audience https://coolnewservice.azure.com/ is not a supported MSI token audience....&amp;quot;}&amp;quot;&lt;/code> you have hit this issue. Please feel free to file an issue at &lt;a class="link" href="https://github.com/Azure/CloudShell/issues" target="_blank" rel="noopener"
>https://github.com/Azure/CloudShell/issues&lt;/a> and we&amp;rsquo;ll endeavor to add it as soon as we can.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you login explicitly (&lt;code>az login&lt;/code>) any Conditional Access rules your company may have in place will be evaluated based on the Cloud Shell container rather than the machine where your browser runs. The Cloud Shell container doesn&amp;rsquo;t count as a managed device for these policies so rights may be limited by the policy.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Azure Arc command-line tools cheat sheet</title><link>https://www.bathysphere.org/p/azurearc-cheatsheet/</link><pubDate>Tue, 22 Sep 2020 17:11:06 -0700</pubDate><guid>https://www.bathysphere.org/p/azurearc-cheatsheet/</guid><description>&lt;img src="https://www.bathysphere.org/p/azurearc-cheatsheet/orbiter.jpg" alt="Featured image of post Azure Arc command-line tools cheat sheet" />&lt;p>Arc for Servers has an Azure CLI extension and PowerShell module. Because they are prerelease, they are not included (yet) in the main releases
(ie, you don&amp;rsquo;t get this just by installing az cli or the Az module).
However they are already functional and useful. Here&amp;rsquo;s how to do some simple operations with each of them.&lt;/p>
&lt;h2 id="install">Install
&lt;/h2>&lt;p>AZ CLI:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az extension add connectedmachine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Azure PowerShell:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">Az&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ConnectedMachine&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-machines">List machines
&lt;/h2>&lt;p>AZ CLI&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az connectedmachine list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># only display a few properties in a convenient form&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">az connectedmachine list --query &lt;span class="s2">&amp;#34;[].{Name:name,ResourceGroup:resourceGroup,Location:location,Status:status}&amp;#34;&lt;/span> -o table
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Azure PowerShell:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-AzConnectedMachine&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-extensions-installed-on-a-machine">List extensions installed on a machine
&lt;/h2>&lt;p>AZ CLI&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az connectedmachine extension list --resource-group edyoung --machine-name edwin-virtual-machine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Azure PowerShell:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-AzConnectedMachineExtension&lt;/span> &lt;span class="n">-ResourceGroupName&lt;/span> &lt;span class="n">edyoung&lt;/span> &lt;span class="n">-MachineName&lt;/span> &lt;span class="nb">edwin-virtual&lt;/span>&lt;span class="n">-machine&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="install-custom-script-extension-on-a-windows-machine-and-run-dir">Install Custom Script Extension on a windows machine and run &amp;lsquo;dir&amp;rsquo;
&lt;/h2>&lt;p>Note that installing extensions currently takes several minutes. Please be patient.&lt;/p>
&lt;p>AZ CLI run in bash&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Note --location needs to be the location of the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">az connectedmachine extension create --machine-name silverbox-ne --resource-group edyoung --name myext --type &lt;span class="s2">&amp;#34;CustomScriptExtension&amp;#34;&lt;/span> --publisher &lt;span class="s2">&amp;#34;Microsoft.Compute&amp;#34;&lt;/span> --settings &lt;span class="s1">&amp;#39;{&amp;#34;commandToExecute&amp;#34;:&amp;#34;dir&amp;#34;}&amp;#39;&lt;/span> --location &lt;span class="s2">&amp;#34;North Europe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AZ CLI run inside PowerShell (the escaping is different for settings param)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">az&lt;/span> &lt;span class="n">connectedmachine&lt;/span> &lt;span class="n">extension&lt;/span> &lt;span class="n">create&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-machine-name&lt;/span> &lt;span class="nb">silverbox-ne&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-resource-group&lt;/span> &lt;span class="n">edyoung&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-name&lt;/span> &lt;span class="n">myext&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-type&lt;/span> &lt;span class="s2">&amp;#34;CustomScriptExtension&amp;#34;&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-publisher&lt;/span> &lt;span class="s2">&amp;#34;Microsoft.Compute&amp;#34;&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-settings&lt;/span> &lt;span class="s1">&amp;#39;{\&amp;#34;commandToExecute\&amp;#34;:\&amp;#34;dir\&amp;#34;}&amp;#39;&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-location&lt;/span> &lt;span class="s2">&amp;#34;North Europe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Azure PowerShell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">New-AzConnectedMachineExtension&lt;/span> &lt;span class="n">-MachineName&lt;/span> &lt;span class="nb">silverbox-ne&lt;/span> &lt;span class="n">-ResourceGroupName&lt;/span> &lt;span class="n">edyoung&lt;/span> &lt;span class="n">-Location&lt;/span> &lt;span class="s2">&amp;#34;North Europe&amp;#34;&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">myext&lt;/span> &lt;span class="n">-Setting&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;commandToExecute&amp;#34;:&amp;#34;dir&amp;#34;}&amp;#39;&lt;/span> &lt;span class="n">-ExtensionType&lt;/span> &lt;span class="n">CustomScriptExtension&lt;/span> &lt;span class="n">-Publisher&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">Compute&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="delete-an-extension">Delete an extension
&lt;/h2>&lt;p>AZ CLI&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az connectedmachine extension delete --name myext -g edyoung --machine-name silverbox-ne
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Azure PowerShell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Remove-AzConnectedMachineExtension&lt;/span> &lt;span class="n">-MachineName&lt;/span> &lt;span class="nb">silverbox-ne&lt;/span> &lt;span class="n">-ResourceGroupName&lt;/span> &lt;span class="n">edyoung&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">myext&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>How to install your own versions of tools in Azure Cloud Shell</title><link>https://www.bathysphere.org/p/cloud-shell-installs/</link><pubDate>Mon, 21 Sep 2020 18:11:06 -0700</pubDate><guid>https://www.bathysphere.org/p/cloud-shell-installs/</guid><description>&lt;img src="https://www.bathysphere.org/p/cloud-shell-installs/image.png" alt="Featured image of post How to install your own versions of tools in Azure Cloud Shell" />&lt;p>Cloud Shell comes with a lot of tools, and we try to keep them up to date. But sometimes you need something a little bit more cutting edge or unusual. How do you install it?&lt;/p>
&lt;p>Using Cloud Shell is a little different from running your own Linux computer, but it&amp;rsquo;s a lot like using a multi-user Unix system.
The main difference is &lt;strong>you are not root&lt;/strong> and we won&amp;rsquo;t tell you the root password (sorry).
So anything that requires you to run &lt;code>sudo&lt;/code> or change files outside your home directory or /tmp won&amp;rsquo;t work. This includes old favorites like &lt;code>apt-get install&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Why? A tiny bit for security - we don&amp;rsquo;t want to make it any easier for people to break out of Cloud Shell than it needs to be - but
mostly for consistency. In Cloud Shell the only things that persist across sessions are the contents of your home directory
and clouddrive. If you manage to change files and install something under /usr/bin, it would magically be gone the next time you start
Cloud Shell, and that wouldn&amp;rsquo;t be too helpful.&lt;/p>&lt;/blockquote>
&lt;p>So the short version is, anything you can install to your home directory or below it will work just fine. Let&amp;rsquo;s look at some examples.&lt;/p>
&lt;h2 id="powershell-modules">PowerShell modules
&lt;/h2>&lt;p>Just install them with &lt;code>Install-Module&lt;/code>. By default, they will be saved to &lt;code>~/.local/share/powershell/Modules/&lt;/code>. Those will be loaded first
in preference to ones that are installed in the system-wide directories, which can be good and bad. Mostly good, but consider this:&lt;/p>
&lt;ol>
&lt;li>Cloud Shell ships with AwesomeModule 1.0&lt;/li>
&lt;li>You&amp;rsquo;re like &amp;ldquo;That&amp;rsquo;s old school, AwesomeModule 1.1 is way better&amp;rdquo;. &lt;code>Install-Module AwesomeModule -RequiredVersion 1.1&lt;/code> FTW!&lt;/li>
&lt;li>Cloud Shell updates to AwesomeModule 2.0&lt;/li>
&lt;li>You still wind up using AwesomeModule 1.1. Sadness.&lt;/li>
&lt;/ol>
&lt;p>This can be particularly tricky with the Azure PowerShell modules, because installing one of them brings along 10 others it depends on. You may want to periodically delete &lt;code>~/.local/share/powershell/Modules/&lt;/code> to be on the safe side.&lt;/p>
&lt;h2 id="node-modules">Node Modules
&lt;/h2>&lt;p>Just install them with &lt;code>npm install&lt;/code>. But &lt;code>npm install -g&lt;/code> tries to update &lt;code>/usr/local/lib/node_modules&lt;/code> which won&amp;rsquo;t work, so don&amp;rsquo;t do that.&lt;/p>
&lt;h2 id="az-cli-and-extensions">AZ CLI and extensions
&lt;/h2>&lt;p>You can install AZ CLI extensions with &lt;code>az extension add&lt;/code>. This saves the extension to a location in your home dir, and just works.&lt;/p>
&lt;p>However updating the whole of AZ CLI is more difficult. I don&amp;rsquo;t have good instructions for doing that at the moment.&lt;/p>
&lt;h2 id="random-executables-and-tools">Random Executables and tools
&lt;/h2>&lt;p>If you have a favorite unix tool look for the &amp;ldquo;Manual Installation&amp;rdquo; instructions on its home page, those will usually work even if &lt;code>apt-get&lt;/code> does not. For example, we don&amp;rsquo;t have the GitHub CLI tool (at the time of writing anyway😉). If you look at &lt;a class="link" href="https://github.com/cli/cli/blob/trunk/docs/install_linux.md" target="_blank" rel="noopener"
>https://github.com/cli/cli/blob/trunk/docs/install_linux.md&lt;/a> it starts with instructions about using apt-get which (sorry) won&amp;rsquo;t work. But under &amp;lsquo;Manual Instructions&amp;rsquo; it turns out you can just download &lt;a class="link" href="https://github.com/cli/cli/releases/download/v1.0.0/gh_1.0.0_linux_amd64.tar.gz" target="_blank" rel="noopener"
>https://github.com/cli/cli/releases/download/v1.0.0/gh_1.0.0_linux_amd64.tar.gz&lt;/a> , unpack it and run it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://github.com/cli/cli/releases/download/v1.0.0/gh_1.0.0_linux_amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar xzvf gh_1.0.0_linux_amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gh_1.0.0_linux_amd64/bin/gh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The last bit points out one snag. You either need to run a program via its full path or add it to a directory in your $PATH. As with PowerShell modules,
be aware that if your directory is earlier in the $PATH than the standard ones, if you shadow a tool that Cloud Shell installs you might not see future updates.&lt;/p>
&lt;h2 id="terraform">Terraform
&lt;/h2>&lt;p>Terraform basically falls under the &amp;lsquo;random executables bucket&amp;rsquo; but there are a few special considerations.&lt;/p>
&lt;p>You can install it locally with&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wget -O terraform.zip https://releases.hashicorp.com/terraform/0.13.2/terraform_0.13.2_linux_amd64.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">unzip terraform.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./terraform
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But it won&amp;rsquo;t behave quite the same as the one in Cloud Shell. That&amp;rsquo;s because if you look at&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">edwin@Azure:~$ more /usr/local/bin/terraform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/usr/bin/env bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ARM_SUBSCRIPTION_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>az account show --output&lt;span class="o">=&lt;/span>json &lt;span class="p">|&lt;/span> jq -r -M &lt;span class="s1">&amp;#39;.id&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ARM_TENANT_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>az account show --output&lt;span class="o">=&lt;/span>json &lt;span class="p">|&lt;/span> jq -r -M &lt;span class="s1">&amp;#39;.tenantId&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ARM_MSI_ENDPOINT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$MSI_ENDPOINT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ARM_MSI_ENDPOINT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">ARM_USE_MSI&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">ARM_USE_MSI&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/terraform:&lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">terraform &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can see it&amp;rsquo;s really a script where we set a couple environment variables so terraform works better in Cloud Shell. To get the benefit of those too, you need to copy the script to (say) &lt;code>~/terraform.sh&lt;/code> and
edit it so it finds and runs your local terraform executable as well.&lt;/p></description></item><item><title>Does Azure Cloud Shell store my command history?</title><link>https://www.bathysphere.org/p/cloud-shell-history/</link><pubDate>Mon, 07 Sep 2020 18:11:06 -0700</pubDate><guid>https://www.bathysphere.org/p/cloud-shell-history/</guid><description>&lt;img src="https://www.bathysphere.org/p/cloud-shell-history/image.png" alt="Featured image of post Does Azure Cloud Shell store my command history?" />&lt;p>A few people have asked &lt;em>&amp;ldquo;Hey, uh, hypothetically, if I had typed a password or a secret at the Cloud Shell prompt, did you store it, and how would I delete it? Obviously I would never do this, asking for a friend.&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Relax, we&amp;rsquo;ve all done it. And the answer is &amp;ldquo;Sort of&amp;rdquo;.&lt;/p>
&lt;p>In more detail, Cloud Shell does not store your history itself. But the shell you are running inside it does, unless you have configured something specially. The details depend on the shell. Since the shell doesn&amp;rsquo;t know what is a password and what is not, it &lt;em>will&lt;/em> store secrets if you type them directly at the command-line.&lt;/p>
&lt;h1 id="bash">Bash
&lt;/h1>&lt;p>Bash stores the commands you type in &lt;code>~/.bash_history&lt;/code>. This gets saved when you exit the shell.&lt;/p>
&lt;h1 id="powershell">PowerShell
&lt;/h1>&lt;p>PowerShell uses a package called PSReadLine to do the command-line interaction (such as tab completion). That module, rather than PowerShell itself, stores the commands you type in &lt;code>~/.local/share/powershell/PSReadLine/ConsoleHost_history.txt&lt;/code> by default.
You can adjust the location and behavior with &lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/module/psreadline/set-psreadlineoption?view=powershell-7" target="_blank" rel="noopener"
>&lt;code>Set-PSReadLineOption&lt;/code>&lt;/a>.&lt;/p>
&lt;h1 id="cleaning-up">Cleaning Up
&lt;/h1>&lt;p>Whichever shell you use, you can clear either file by deleting it. Remember that the file is usually updated at the end of a session, so you may need to exit Cloud Shell, reopen it, then delete the file to be sure you caught it.&lt;/p>
&lt;p>Your entire home directory (including these files) is stored in a file called &lt;code>.cloudconsole/acc_{username}.img&lt;/code> which is kept in your Cloud Drive, which is in your own Azure subscription. You can see this by clicking &amp;ldquo;Manage File Share&amp;rdquo; in the Cloud Shell toolbar and opening the .cloudconsole folder in Storage Explorer. If you are feeling super paranoid you can delete the whole file, but you will of course lose everything in your home directory.&lt;/p></description></item><item><title>What's the difference between az account show and Get-AzContext?</title><link>https://www.bathysphere.org/p/whats-the-difference-between-az-account-show-and-get-azcontext/</link><pubDate>Mon, 07 Sep 2020 17:11:06 -0700</pubDate><guid>https://www.bathysphere.org/p/whats-the-difference-between-az-account-show-and-get-azcontext/</guid><description>&lt;img src="https://www.bathysphere.org/p/whats-the-difference-between-az-account-show-and-get-azcontext/paris.jpg" alt="Featured image of post What's the difference between az account show and Get-AzContext?" />&lt;p>One issue which can trip you up when using command-line tools to configure Azure is a confusing &lt;em>lack&lt;/em> of interaction between Azure CLI and Azure PowerShell. They both provide a &amp;ldquo;context&amp;rdquo; so you don&amp;rsquo;t have to keep specifying the subscription over and over. But Azure CLI (the &lt;code>az&lt;/code> command) has a separate context from Azure PowerShell. You can see this by running&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">az account show &lt;span class="c1"># show azure CLI context&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get-AzContext &lt;span class="c1"># show azure Powershell context&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">az account &lt;span class="nb">set&lt;/span> --subscription &lt;span class="s1">&amp;#39;mysub2&amp;#39;&lt;/span> &lt;span class="c1"># change Azure CLI context&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">az account show &lt;span class="c1"># azure CLI has changed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get-AzContext &lt;span class="c1"># Azure PowerShell has not!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You should find that the second output from &lt;code>az account show&lt;/code> has changed to your &lt;code>mysub2&lt;/code> subscription, but &lt;code>Get-AzContext&lt;/code> still has the previous value. Similarly, you can run &lt;code>Set-AzContext -Subscription xxx&lt;/code> and it will change the output from &lt;code>Get-AzContext&lt;/code> but not the output from &lt;code>az account show&lt;/code>.&lt;/p>
&lt;p>So if you have a script where you change Azure CLI&amp;rsquo;s context and then you run an Azure PowerShell command, it looks at PowerShell&amp;rsquo;s context (which hasn&amp;rsquo;t changed) so it doesn&amp;rsquo;t produce the answer you want.&lt;/p>
&lt;p>You can fix this by either: run &lt;code>Set-AzContext&lt;/code> as well before running the cmdlet; or running the az equivalent of your cmdlet, which will honor the az context.&lt;/p>
&lt;p>You may be thinking &amp;ldquo;That&amp;rsquo;s crazy! Why do it that way? You should change it so both share a context!&amp;rdquo; I don&amp;rsquo;t personally know the history of why these 2 are separate. But to be honest I doubt that it can be changed at this point without causing a lot of backward-compatibility issues for people who accidentally or deliberately rely on the current behavior.&lt;/p></description></item><item><title>Links</title><link>https://www.bathysphere.org/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/links/</guid><description/></item><item><title>Search</title><link>https://www.bathysphere.org/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.bathysphere.org/search/</guid><description/></item></channel></rss>